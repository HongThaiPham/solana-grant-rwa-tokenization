/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { RWA_TOKENIZATION_PROGRAM_ADDRESS } from '../programs';

/** InsufficientCredits: Insufficient credits */
export const RWA_TOKENIZATION_ERROR__INSUFFICIENT_CREDITS = 0x1770; // 6000
/** Overflow: Overflow */
export const RWA_TOKENIZATION_ERROR__OVERFLOW = 0x1771; // 6001
/** NoCredits: No credits */
export const RWA_TOKENIZATION_ERROR__NO_CREDITS = 0x1772; // 6002
/** InvalidAmount:  */
export const RWA_TOKENIZATION_ERROR__INVALID_AMOUNT = 0x1773; // 6003
/** InsufficientBalance:  */
export const RWA_TOKENIZATION_ERROR__INSUFFICIENT_BALANCE = 0x1774; // 6004

export type RwaTokenizationError =
  | typeof RWA_TOKENIZATION_ERROR__INSUFFICIENT_BALANCE
  | typeof RWA_TOKENIZATION_ERROR__INSUFFICIENT_CREDITS
  | typeof RWA_TOKENIZATION_ERROR__INVALID_AMOUNT
  | typeof RWA_TOKENIZATION_ERROR__NO_CREDITS
  | typeof RWA_TOKENIZATION_ERROR__OVERFLOW;

let rwaTokenizationErrorMessages:
  | Record<RwaTokenizationError, string>
  | undefined;
if (process.env.NODE_ENV !== 'production') {
  rwaTokenizationErrorMessages = {
    [RWA_TOKENIZATION_ERROR__INSUFFICIENT_BALANCE]: ``,
    [RWA_TOKENIZATION_ERROR__INSUFFICIENT_CREDITS]: `Insufficient credits`,
    [RWA_TOKENIZATION_ERROR__INVALID_AMOUNT]: ``,
    [RWA_TOKENIZATION_ERROR__NO_CREDITS]: `No credits`,
    [RWA_TOKENIZATION_ERROR__OVERFLOW]: `Overflow`,
  };
}

export function getRwaTokenizationErrorMessage(
  code: RwaTokenizationError
): string {
  if (process.env.NODE_ENV !== 'production') {
    return (
      rwaTokenizationErrorMessages as Record<RwaTokenizationError, string>
    )[code];
  }

  return 'Error message not available in production bundles.';
}

export function isRwaTokenizationError<
  TProgramErrorCode extends RwaTokenizationError,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    RWA_TOKENIZATION_PROGRAM_ADDRESS,
    code
  );
}
