/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const MINT_AUTHORITY_DISCRIMINATOR = new Uint8Array([
  148, 0, 219, 228, 254, 237, 76, 128,
]);

export function getMintAuthorityDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    MINT_AUTHORITY_DISCRIMINATOR
  );
}

export type MintAuthority = {
  discriminator: ReadonlyUint8Array;
  authority: Address;
  mint: Address;
  transferHook: Address;
  bump: number;
};

export type MintAuthorityArgs = {
  authority: Address;
  mint: Address;
  transferHook: Address;
  bump: number;
};

export function getMintAuthorityEncoder(): Encoder<MintAuthorityArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['authority', getAddressEncoder()],
      ['mint', getAddressEncoder()],
      ['transferHook', getAddressEncoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: MINT_AUTHORITY_DISCRIMINATOR })
  );
}

export function getMintAuthorityDecoder(): Decoder<MintAuthority> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['authority', getAddressDecoder()],
    ['mint', getAddressDecoder()],
    ['transferHook', getAddressDecoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getMintAuthorityCodec(): Codec<
  MintAuthorityArgs,
  MintAuthority
> {
  return combineCodec(getMintAuthorityEncoder(), getMintAuthorityDecoder());
}

export function decodeMintAuthority<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<MintAuthority, TAddress>;
export function decodeMintAuthority<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<MintAuthority, TAddress>;
export function decodeMintAuthority<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<MintAuthority, TAddress> | MaybeAccount<MintAuthority, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getMintAuthorityDecoder()
  );
}

export async function fetchMintAuthority<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<MintAuthority, TAddress>> {
  const maybeAccount = await fetchMaybeMintAuthority(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeMintAuthority<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<MintAuthority, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeMintAuthority(maybeAccount);
}

export async function fetchAllMintAuthority(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<MintAuthority>[]> {
  const maybeAccounts = await fetchAllMaybeMintAuthority(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeMintAuthority(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<MintAuthority>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeMintAuthority(maybeAccount));
}

export function getMintAuthoritySize(): number {
  return 105;
}
