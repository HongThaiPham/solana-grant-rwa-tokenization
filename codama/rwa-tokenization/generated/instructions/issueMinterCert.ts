/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { RWA_TOKENIZATION_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const ISSUE_MINTER_CERT_DISCRIMINATOR = new Uint8Array([
  211, 103, 150, 50, 154, 142, 227, 197,
]);

export function getIssueMinterCertDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    ISSUE_MINTER_CERT_DISCRIMINATOR
  );
}

export type IssueMinterCertInstruction<
  TProgram extends string = typeof RWA_TOKENIZATION_PROGRAM_ADDRESS,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountConfigAccount extends string | IAccountMeta<string> = string,
  TAccountReceiver extends string | IAccountMeta<string> = string,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountReceiverTokenAccount extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountAssociatedTokenProgram extends
    | string
    | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountConfigAccount extends string
        ? ReadonlyAccount<TAccountConfigAccount>
        : TAccountConfigAccount,
      TAccountReceiver extends string
        ? ReadonlyAccount<TAccountReceiver>
        : TAccountReceiver,
      TAccountMint extends string
        ? WritableAccount<TAccountMint>
        : TAccountMint,
      TAccountReceiverTokenAccount extends string
        ? WritableAccount<TAccountReceiverTokenAccount>
        : TAccountReceiverTokenAccount,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type IssueMinterCertInstructionData = {
  discriminator: ReadonlyUint8Array;
  name: string;
  symbol: string;
  uri: string;
};

export type IssueMinterCertInstructionDataArgs = {
  name: string;
  symbol: string;
  uri: string;
};

export function getIssueMinterCertInstructionDataEncoder(): Encoder<IssueMinterCertInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['symbol', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['uri', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({ ...value, discriminator: ISSUE_MINTER_CERT_DISCRIMINATOR })
  );
}

export function getIssueMinterCertInstructionDataDecoder(): Decoder<IssueMinterCertInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['symbol', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['uri', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getIssueMinterCertInstructionDataCodec(): Codec<
  IssueMinterCertInstructionDataArgs,
  IssueMinterCertInstructionData
> {
  return combineCodec(
    getIssueMinterCertInstructionDataEncoder(),
    getIssueMinterCertInstructionDataDecoder()
  );
}

export type IssueMinterCertAsyncInput<
  TAccountAuthority extends string = string,
  TAccountConfigAccount extends string = string,
  TAccountReceiver extends string = string,
  TAccountMint extends string = string,
  TAccountReceiverTokenAccount extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  configAccount?: Address<TAccountConfigAccount>;
  receiver: Address<TAccountReceiver>;
  mint?: Address<TAccountMint>;
  receiverTokenAccount?: Address<TAccountReceiverTokenAccount>;
  systemProgram?: Address<TAccountSystemProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  name: IssueMinterCertInstructionDataArgs['name'];
  symbol: IssueMinterCertInstructionDataArgs['symbol'];
  uri: IssueMinterCertInstructionDataArgs['uri'];
};

export async function getIssueMinterCertInstructionAsync<
  TAccountAuthority extends string,
  TAccountConfigAccount extends string,
  TAccountReceiver extends string,
  TAccountMint extends string,
  TAccountReceiverTokenAccount extends string,
  TAccountSystemProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof RWA_TOKENIZATION_PROGRAM_ADDRESS,
>(
  input: IssueMinterCertAsyncInput<
    TAccountAuthority,
    TAccountConfigAccount,
    TAccountReceiver,
    TAccountMint,
    TAccountReceiverTokenAccount,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  IssueMinterCertInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountConfigAccount,
    TAccountReceiver,
    TAccountMint,
    TAccountReceiverTokenAccount,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? RWA_TOKENIZATION_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    configAccount: { value: input.configAccount ?? null, isWritable: false },
    receiver: { value: input.receiver ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: true },
    receiverTokenAccount: {
      value: input.receiverTokenAccount ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.configAccount.value) {
    accounts.configAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([99, 111, 110, 102, 105, 103])),
      ],
    });
  }
  if (!accounts.mint.value) {
    accounts.mint.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([109])),
        getAddressEncoder().encode(expectAddress(accounts.receiver.value)),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }
  if (!accounts.receiverTokenAccount.value) {
    accounts.receiverTokenAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.receiver.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.configAccount),
      getAccountMeta(accounts.receiver),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.receiverTokenAccount),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getIssueMinterCertInstructionDataEncoder().encode(
      args as IssueMinterCertInstructionDataArgs
    ),
  } as IssueMinterCertInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountConfigAccount,
    TAccountReceiver,
    TAccountMint,
    TAccountReceiverTokenAccount,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram
  >;

  return instruction;
}

export type IssueMinterCertInput<
  TAccountAuthority extends string = string,
  TAccountConfigAccount extends string = string,
  TAccountReceiver extends string = string,
  TAccountMint extends string = string,
  TAccountReceiverTokenAccount extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  configAccount: Address<TAccountConfigAccount>;
  receiver: Address<TAccountReceiver>;
  mint: Address<TAccountMint>;
  receiverTokenAccount: Address<TAccountReceiverTokenAccount>;
  systemProgram?: Address<TAccountSystemProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  name: IssueMinterCertInstructionDataArgs['name'];
  symbol: IssueMinterCertInstructionDataArgs['symbol'];
  uri: IssueMinterCertInstructionDataArgs['uri'];
};

export function getIssueMinterCertInstruction<
  TAccountAuthority extends string,
  TAccountConfigAccount extends string,
  TAccountReceiver extends string,
  TAccountMint extends string,
  TAccountReceiverTokenAccount extends string,
  TAccountSystemProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof RWA_TOKENIZATION_PROGRAM_ADDRESS,
>(
  input: IssueMinterCertInput<
    TAccountAuthority,
    TAccountConfigAccount,
    TAccountReceiver,
    TAccountMint,
    TAccountReceiverTokenAccount,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): IssueMinterCertInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountConfigAccount,
  TAccountReceiver,
  TAccountMint,
  TAccountReceiverTokenAccount,
  TAccountSystemProgram,
  TAccountAssociatedTokenProgram,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? RWA_TOKENIZATION_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    configAccount: { value: input.configAccount ?? null, isWritable: false },
    receiver: { value: input.receiver ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: true },
    receiverTokenAccount: {
      value: input.receiverTokenAccount ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.configAccount),
      getAccountMeta(accounts.receiver),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.receiverTokenAccount),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getIssueMinterCertInstructionDataEncoder().encode(
      args as IssueMinterCertInstructionDataArgs
    ),
  } as IssueMinterCertInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountConfigAccount,
    TAccountReceiver,
    TAccountMint,
    TAccountReceiverTokenAccount,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedIssueMinterCertInstruction<
  TProgram extends string = typeof RWA_TOKENIZATION_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    authority: TAccountMetas[0];
    configAccount: TAccountMetas[1];
    receiver: TAccountMetas[2];
    mint: TAccountMetas[3];
    receiverTokenAccount: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
    associatedTokenProgram: TAccountMetas[6];
    tokenProgram: TAccountMetas[7];
  };
  data: IssueMinterCertInstructionData;
};

export function parseIssueMinterCertInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedIssueMinterCertInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      configAccount: getNextAccount(),
      receiver: getNextAccount(),
      mint: getNextAccount(),
      receiverTokenAccount: getNextAccount(),
      systemProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getIssueMinterCertInstructionDataDecoder().decode(instruction.data),
  };
}
