/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { RWA_TOKENIZATION_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const MINT_CARBON_TOKEN_DISCRIMINATOR = new Uint8Array([
  207, 25, 9, 69, 73, 81, 107, 140,
]);

export function getMintCarbonTokenDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    MINT_CARBON_TOKEN_DISCRIMINATOR
  );
}

export type MintCarbonTokenInstruction<
  TProgram extends string = typeof RWA_TOKENIZATION_PROGRAM_ADDRESS,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountCreator extends string | IAccountMeta<string> = string,
  TAccountConfigAccount extends string | IAccountMeta<string> = string,
  TAccountMintAuthority extends string | IAccountMeta<string> = string,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountCreatorTokenAccount extends string | IAccountMeta<string> = string,
  TAccountMinterNftMint extends string | IAccountMeta<string> = string,
  TAccountMinterNftTokenAccount extends string | IAccountMeta<string> = string,
  TAccountTransferHookProgram extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb',
  TAccountAssociatedTokenProgram extends
    | string
    | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountCreator extends string
        ? WritableSignerAccount<TAccountCreator> &
            IAccountSignerMeta<TAccountCreator>
        : TAccountCreator,
      TAccountConfigAccount extends string
        ? ReadonlyAccount<TAccountConfigAccount>
        : TAccountConfigAccount,
      TAccountMintAuthority extends string
        ? ReadonlyAccount<TAccountMintAuthority>
        : TAccountMintAuthority,
      TAccountMint extends string
        ? WritableAccount<TAccountMint>
        : TAccountMint,
      TAccountCreatorTokenAccount extends string
        ? WritableAccount<TAccountCreatorTokenAccount>
        : TAccountCreatorTokenAccount,
      TAccountMinterNftMint extends string
        ? WritableAccount<TAccountMinterNftMint>
        : TAccountMinterNftMint,
      TAccountMinterNftTokenAccount extends string
        ? ReadonlyAccount<TAccountMinterNftTokenAccount>
        : TAccountMinterNftTokenAccount,
      TAccountTransferHookProgram extends string
        ? ReadonlyAccount<TAccountTransferHookProgram>
        : TAccountTransferHookProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type MintCarbonTokenInstructionData = {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
};

export type MintCarbonTokenInstructionDataArgs = { amount: number | bigint };

export function getMintCarbonTokenInstructionDataEncoder(): Encoder<MintCarbonTokenInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: MINT_CARBON_TOKEN_DISCRIMINATOR })
  );
}

export function getMintCarbonTokenInstructionDataDecoder(): Decoder<MintCarbonTokenInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount', getU64Decoder()],
  ]);
}

export function getMintCarbonTokenInstructionDataCodec(): Codec<
  MintCarbonTokenInstructionDataArgs,
  MintCarbonTokenInstructionData
> {
  return combineCodec(
    getMintCarbonTokenInstructionDataEncoder(),
    getMintCarbonTokenInstructionDataDecoder()
  );
}

export type MintCarbonTokenAsyncInput<
  TAccountPayer extends string = string,
  TAccountCreator extends string = string,
  TAccountConfigAccount extends string = string,
  TAccountMintAuthority extends string = string,
  TAccountMint extends string = string,
  TAccountCreatorTokenAccount extends string = string,
  TAccountMinterNftMint extends string = string,
  TAccountMinterNftTokenAccount extends string = string,
  TAccountTransferHookProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  creator: TransactionSigner<TAccountCreator>;
  configAccount?: Address<TAccountConfigAccount>;
  mintAuthority?: Address<TAccountMintAuthority>;
  mint?: Address<TAccountMint>;
  creatorTokenAccount?: Address<TAccountCreatorTokenAccount>;
  minterNftMint?: Address<TAccountMinterNftMint>;
  minterNftTokenAccount?: Address<TAccountMinterNftTokenAccount>;
  transferHookProgram: Address<TAccountTransferHookProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  amount: MintCarbonTokenInstructionDataArgs['amount'];
};

export async function getMintCarbonTokenInstructionAsync<
  TAccountPayer extends string,
  TAccountCreator extends string,
  TAccountConfigAccount extends string,
  TAccountMintAuthority extends string,
  TAccountMint extends string,
  TAccountCreatorTokenAccount extends string,
  TAccountMinterNftMint extends string,
  TAccountMinterNftTokenAccount extends string,
  TAccountTransferHookProgram extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof RWA_TOKENIZATION_PROGRAM_ADDRESS,
>(
  input: MintCarbonTokenAsyncInput<
    TAccountPayer,
    TAccountCreator,
    TAccountConfigAccount,
    TAccountMintAuthority,
    TAccountMint,
    TAccountCreatorTokenAccount,
    TAccountMinterNftMint,
    TAccountMinterNftTokenAccount,
    TAccountTransferHookProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  MintCarbonTokenInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountCreator,
    TAccountConfigAccount,
    TAccountMintAuthority,
    TAccountMint,
    TAccountCreatorTokenAccount,
    TAccountMinterNftMint,
    TAccountMinterNftTokenAccount,
    TAccountTransferHookProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? RWA_TOKENIZATION_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    creator: { value: input.creator ?? null, isWritable: true },
    configAccount: { value: input.configAccount ?? null, isWritable: false },
    mintAuthority: { value: input.mintAuthority ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: true },
    creatorTokenAccount: {
      value: input.creatorTokenAccount ?? null,
      isWritable: true,
    },
    minterNftMint: { value: input.minterNftMint ?? null, isWritable: true },
    minterNftTokenAccount: {
      value: input.minterNftTokenAccount ?? null,
      isWritable: false,
    },
    transferHookProgram: {
      value: input.transferHookProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.configAccount.value) {
    accounts.configAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([99, 111, 110, 102, 105, 103])),
      ],
    });
  }
  if (!accounts.minterNftMint.value) {
    accounts.minterNftMint.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([109])),
        getAddressEncoder().encode(expectAddress(accounts.creator.value)),
      ],
    });
  }
  if (!accounts.mint.value) {
    accounts.mint.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([99, 99, 116])),
        getAddressEncoder().encode(expectAddress(accounts.minterNftMint.value)),
      ],
    });
  }
  if (!accounts.mintAuthority.value) {
    accounts.mintAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([109, 97])),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }
  if (!accounts.creatorTokenAccount.value) {
    accounts.creatorTokenAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.creator.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.minterNftTokenAccount.value) {
    accounts.minterNftTokenAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.creator.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.minterNftMint.value)),
      ],
    });
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.configAccount),
      getAccountMeta(accounts.mintAuthority),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.creatorTokenAccount),
      getAccountMeta(accounts.minterNftMint),
      getAccountMeta(accounts.minterNftTokenAccount),
      getAccountMeta(accounts.transferHookProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getMintCarbonTokenInstructionDataEncoder().encode(
      args as MintCarbonTokenInstructionDataArgs
    ),
  } as MintCarbonTokenInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountCreator,
    TAccountConfigAccount,
    TAccountMintAuthority,
    TAccountMint,
    TAccountCreatorTokenAccount,
    TAccountMinterNftMint,
    TAccountMinterNftTokenAccount,
    TAccountTransferHookProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type MintCarbonTokenInput<
  TAccountPayer extends string = string,
  TAccountCreator extends string = string,
  TAccountConfigAccount extends string = string,
  TAccountMintAuthority extends string = string,
  TAccountMint extends string = string,
  TAccountCreatorTokenAccount extends string = string,
  TAccountMinterNftMint extends string = string,
  TAccountMinterNftTokenAccount extends string = string,
  TAccountTransferHookProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  creator: TransactionSigner<TAccountCreator>;
  configAccount: Address<TAccountConfigAccount>;
  mintAuthority: Address<TAccountMintAuthority>;
  mint: Address<TAccountMint>;
  creatorTokenAccount: Address<TAccountCreatorTokenAccount>;
  minterNftMint: Address<TAccountMinterNftMint>;
  minterNftTokenAccount: Address<TAccountMinterNftTokenAccount>;
  transferHookProgram: Address<TAccountTransferHookProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  amount: MintCarbonTokenInstructionDataArgs['amount'];
};

export function getMintCarbonTokenInstruction<
  TAccountPayer extends string,
  TAccountCreator extends string,
  TAccountConfigAccount extends string,
  TAccountMintAuthority extends string,
  TAccountMint extends string,
  TAccountCreatorTokenAccount extends string,
  TAccountMinterNftMint extends string,
  TAccountMinterNftTokenAccount extends string,
  TAccountTransferHookProgram extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof RWA_TOKENIZATION_PROGRAM_ADDRESS,
>(
  input: MintCarbonTokenInput<
    TAccountPayer,
    TAccountCreator,
    TAccountConfigAccount,
    TAccountMintAuthority,
    TAccountMint,
    TAccountCreatorTokenAccount,
    TAccountMinterNftMint,
    TAccountMinterNftTokenAccount,
    TAccountTransferHookProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): MintCarbonTokenInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountCreator,
  TAccountConfigAccount,
  TAccountMintAuthority,
  TAccountMint,
  TAccountCreatorTokenAccount,
  TAccountMinterNftMint,
  TAccountMinterNftTokenAccount,
  TAccountTransferHookProgram,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? RWA_TOKENIZATION_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    creator: { value: input.creator ?? null, isWritable: true },
    configAccount: { value: input.configAccount ?? null, isWritable: false },
    mintAuthority: { value: input.mintAuthority ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: true },
    creatorTokenAccount: {
      value: input.creatorTokenAccount ?? null,
      isWritable: true,
    },
    minterNftMint: { value: input.minterNftMint ?? null, isWritable: true },
    minterNftTokenAccount: {
      value: input.minterNftTokenAccount ?? null,
      isWritable: false,
    },
    transferHookProgram: {
      value: input.transferHookProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.configAccount),
      getAccountMeta(accounts.mintAuthority),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.creatorTokenAccount),
      getAccountMeta(accounts.minterNftMint),
      getAccountMeta(accounts.minterNftTokenAccount),
      getAccountMeta(accounts.transferHookProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getMintCarbonTokenInstructionDataEncoder().encode(
      args as MintCarbonTokenInstructionDataArgs
    ),
  } as MintCarbonTokenInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountCreator,
    TAccountConfigAccount,
    TAccountMintAuthority,
    TAccountMint,
    TAccountCreatorTokenAccount,
    TAccountMinterNftMint,
    TAccountMinterNftTokenAccount,
    TAccountTransferHookProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedMintCarbonTokenInstruction<
  TProgram extends string = typeof RWA_TOKENIZATION_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    creator: TAccountMetas[1];
    configAccount: TAccountMetas[2];
    mintAuthority: TAccountMetas[3];
    mint: TAccountMetas[4];
    creatorTokenAccount: TAccountMetas[5];
    minterNftMint: TAccountMetas[6];
    minterNftTokenAccount: TAccountMetas[7];
    transferHookProgram: TAccountMetas[8];
    tokenProgram: TAccountMetas[9];
    associatedTokenProgram: TAccountMetas[10];
    systemProgram: TAccountMetas[11];
  };
  data: MintCarbonTokenInstructionData;
};

export function parseMintCarbonTokenInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedMintCarbonTokenInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 12) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      creator: getNextAccount(),
      configAccount: getNextAccount(),
      mintAuthority: getNextAccount(),
      mint: getNextAccount(),
      creatorTokenAccount: getNextAccount(),
      minterNftMint: getNextAccount(),
      minterNftTokenAccount: getNextAccount(),
      transferHookProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getMintCarbonTokenInstructionDataDecoder().decode(instruction.data),
  };
}
