/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { RWA_TOKENIZATION_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const RETIRE_TOKEN_DISCRIMINATOR = new Uint8Array([
  226, 89, 231, 200, 108, 28, 18, 183,
]);

export function getRetireTokenDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    RETIRE_TOKEN_DISCRIMINATOR
  );
}

export type RetireTokenInstruction<
  TProgram extends string = typeof RWA_TOKENIZATION_PROGRAM_ADDRESS,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountConsumer extends string | IAccountMeta<string> = string,
  TAccountMintAuthority extends string | IAccountMeta<string> = string,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountConsumerTokenAccount extends string | IAccountMeta<string> = string,
  TAccountNftMint extends string | IAccountMeta<string> = string,
  TAccountConsumerNftTokenAccount extends
    | string
    | IAccountMeta<string> = string,
  TAccountTransferHookProgram extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb',
  TAccountAssociatedTokenProgram extends
    | string
    | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountConsumer extends string
        ? WritableSignerAccount<TAccountConsumer> &
            IAccountSignerMeta<TAccountConsumer>
        : TAccountConsumer,
      TAccountMintAuthority extends string
        ? ReadonlyAccount<TAccountMintAuthority>
        : TAccountMintAuthority,
      TAccountMint extends string
        ? WritableAccount<TAccountMint>
        : TAccountMint,
      TAccountConsumerTokenAccount extends string
        ? WritableAccount<TAccountConsumerTokenAccount>
        : TAccountConsumerTokenAccount,
      TAccountNftMint extends string
        ? WritableSignerAccount<TAccountNftMint> &
            IAccountSignerMeta<TAccountNftMint>
        : TAccountNftMint,
      TAccountConsumerNftTokenAccount extends string
        ? WritableAccount<TAccountConsumerNftTokenAccount>
        : TAccountConsumerNftTokenAccount,
      TAccountTransferHookProgram extends string
        ? ReadonlyAccount<TAccountTransferHookProgram>
        : TAccountTransferHookProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type RetireTokenInstructionData = {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
};

export type RetireTokenInstructionDataArgs = { amount: number | bigint };

export function getRetireTokenInstructionDataEncoder(): Encoder<RetireTokenInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: RETIRE_TOKEN_DISCRIMINATOR })
  );
}

export function getRetireTokenInstructionDataDecoder(): Decoder<RetireTokenInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount', getU64Decoder()],
  ]);
}

export function getRetireTokenInstructionDataCodec(): Codec<
  RetireTokenInstructionDataArgs,
  RetireTokenInstructionData
> {
  return combineCodec(
    getRetireTokenInstructionDataEncoder(),
    getRetireTokenInstructionDataDecoder()
  );
}

export type RetireTokenAsyncInput<
  TAccountPayer extends string = string,
  TAccountConsumer extends string = string,
  TAccountMintAuthority extends string = string,
  TAccountMint extends string = string,
  TAccountConsumerTokenAccount extends string = string,
  TAccountNftMint extends string = string,
  TAccountConsumerNftTokenAccount extends string = string,
  TAccountTransferHookProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  consumer: TransactionSigner<TAccountConsumer>;
  mintAuthority?: Address<TAccountMintAuthority>;
  mint: Address<TAccountMint>;
  consumerTokenAccount?: Address<TAccountConsumerTokenAccount>;
  nftMint: TransactionSigner<TAccountNftMint>;
  consumerNftTokenAccount?: Address<TAccountConsumerNftTokenAccount>;
  transferHookProgram: Address<TAccountTransferHookProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  amount: RetireTokenInstructionDataArgs['amount'];
};

export async function getRetireTokenInstructionAsync<
  TAccountPayer extends string,
  TAccountConsumer extends string,
  TAccountMintAuthority extends string,
  TAccountMint extends string,
  TAccountConsumerTokenAccount extends string,
  TAccountNftMint extends string,
  TAccountConsumerNftTokenAccount extends string,
  TAccountTransferHookProgram extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof RWA_TOKENIZATION_PROGRAM_ADDRESS,
>(
  input: RetireTokenAsyncInput<
    TAccountPayer,
    TAccountConsumer,
    TAccountMintAuthority,
    TAccountMint,
    TAccountConsumerTokenAccount,
    TAccountNftMint,
    TAccountConsumerNftTokenAccount,
    TAccountTransferHookProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  RetireTokenInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountConsumer,
    TAccountMintAuthority,
    TAccountMint,
    TAccountConsumerTokenAccount,
    TAccountNftMint,
    TAccountConsumerNftTokenAccount,
    TAccountTransferHookProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? RWA_TOKENIZATION_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    consumer: { value: input.consumer ?? null, isWritable: true },
    mintAuthority: { value: input.mintAuthority ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: true },
    consumerTokenAccount: {
      value: input.consumerTokenAccount ?? null,
      isWritable: true,
    },
    nftMint: { value: input.nftMint ?? null, isWritable: true },
    consumerNftTokenAccount: {
      value: input.consumerNftTokenAccount ?? null,
      isWritable: true,
    },
    transferHookProgram: {
      value: input.transferHookProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.mintAuthority.value) {
    accounts.mintAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([109, 97])),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }
  if (!accounts.consumerTokenAccount.value) {
    accounts.consumerTokenAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.consumer.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.consumerNftTokenAccount.value) {
    accounts.consumerNftTokenAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.consumer.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.nftMint.value)),
      ],
    });
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.consumer),
      getAccountMeta(accounts.mintAuthority),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.consumerTokenAccount),
      getAccountMeta(accounts.nftMint),
      getAccountMeta(accounts.consumerNftTokenAccount),
      getAccountMeta(accounts.transferHookProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getRetireTokenInstructionDataEncoder().encode(
      args as RetireTokenInstructionDataArgs
    ),
  } as RetireTokenInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountConsumer,
    TAccountMintAuthority,
    TAccountMint,
    TAccountConsumerTokenAccount,
    TAccountNftMint,
    TAccountConsumerNftTokenAccount,
    TAccountTransferHookProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type RetireTokenInput<
  TAccountPayer extends string = string,
  TAccountConsumer extends string = string,
  TAccountMintAuthority extends string = string,
  TAccountMint extends string = string,
  TAccountConsumerTokenAccount extends string = string,
  TAccountNftMint extends string = string,
  TAccountConsumerNftTokenAccount extends string = string,
  TAccountTransferHookProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  consumer: TransactionSigner<TAccountConsumer>;
  mintAuthority: Address<TAccountMintAuthority>;
  mint: Address<TAccountMint>;
  consumerTokenAccount: Address<TAccountConsumerTokenAccount>;
  nftMint: TransactionSigner<TAccountNftMint>;
  consumerNftTokenAccount: Address<TAccountConsumerNftTokenAccount>;
  transferHookProgram: Address<TAccountTransferHookProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  amount: RetireTokenInstructionDataArgs['amount'];
};

export function getRetireTokenInstruction<
  TAccountPayer extends string,
  TAccountConsumer extends string,
  TAccountMintAuthority extends string,
  TAccountMint extends string,
  TAccountConsumerTokenAccount extends string,
  TAccountNftMint extends string,
  TAccountConsumerNftTokenAccount extends string,
  TAccountTransferHookProgram extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof RWA_TOKENIZATION_PROGRAM_ADDRESS,
>(
  input: RetireTokenInput<
    TAccountPayer,
    TAccountConsumer,
    TAccountMintAuthority,
    TAccountMint,
    TAccountConsumerTokenAccount,
    TAccountNftMint,
    TAccountConsumerNftTokenAccount,
    TAccountTransferHookProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): RetireTokenInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountConsumer,
  TAccountMintAuthority,
  TAccountMint,
  TAccountConsumerTokenAccount,
  TAccountNftMint,
  TAccountConsumerNftTokenAccount,
  TAccountTransferHookProgram,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? RWA_TOKENIZATION_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    consumer: { value: input.consumer ?? null, isWritable: true },
    mintAuthority: { value: input.mintAuthority ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: true },
    consumerTokenAccount: {
      value: input.consumerTokenAccount ?? null,
      isWritable: true,
    },
    nftMint: { value: input.nftMint ?? null, isWritable: true },
    consumerNftTokenAccount: {
      value: input.consumerNftTokenAccount ?? null,
      isWritable: true,
    },
    transferHookProgram: {
      value: input.transferHookProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.consumer),
      getAccountMeta(accounts.mintAuthority),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.consumerTokenAccount),
      getAccountMeta(accounts.nftMint),
      getAccountMeta(accounts.consumerNftTokenAccount),
      getAccountMeta(accounts.transferHookProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getRetireTokenInstructionDataEncoder().encode(
      args as RetireTokenInstructionDataArgs
    ),
  } as RetireTokenInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountConsumer,
    TAccountMintAuthority,
    TAccountMint,
    TAccountConsumerTokenAccount,
    TAccountNftMint,
    TAccountConsumerNftTokenAccount,
    TAccountTransferHookProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedRetireTokenInstruction<
  TProgram extends string = typeof RWA_TOKENIZATION_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    consumer: TAccountMetas[1];
    mintAuthority: TAccountMetas[2];
    mint: TAccountMetas[3];
    consumerTokenAccount: TAccountMetas[4];
    nftMint: TAccountMetas[5];
    consumerNftTokenAccount: TAccountMetas[6];
    transferHookProgram: TAccountMetas[7];
    tokenProgram: TAccountMetas[8];
    associatedTokenProgram: TAccountMetas[9];
    systemProgram: TAccountMetas[10];
  };
  data: RetireTokenInstructionData;
};

export function parseRetireTokenInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedRetireTokenInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 11) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      consumer: getNextAccount(),
      mintAuthority: getNextAccount(),
      mint: getNextAccount(),
      consumerTokenAccount: getNextAccount(),
      nftMint: getNextAccount(),
      consumerNftTokenAccount: getNextAccount(),
      transferHookProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getRetireTokenInstructionDataDecoder().decode(instruction.data),
  };
}
