/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { RWA_TOKENIZATION_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const INIT_CARBON_TOKEN_DISCRIMINATOR = new Uint8Array([
  255, 85, 206, 60, 14, 230, 186, 114,
]);

export function getInitCarbonTokenDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INIT_CARBON_TOKEN_DISCRIMINATOR
  );
}

export type InitCarbonTokenInstruction<
  TProgram extends string = typeof RWA_TOKENIZATION_PROGRAM_ADDRESS,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountCreator extends string | IAccountMeta<string> = string,
  TAccountMintAuthority extends string | IAccountMeta<string> = string,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountMinterNftMint extends string | IAccountMeta<string> = string,
  TAccountMinterNftTokenAccount extends string | IAccountMeta<string> = string,
  TAccountTransferHookProgram extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb',
  TAccountAssociatedTokenProgram extends
    | string
    | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountCreator extends string
        ? WritableSignerAccount<TAccountCreator> &
            IAccountSignerMeta<TAccountCreator>
        : TAccountCreator,
      TAccountMintAuthority extends string
        ? WritableAccount<TAccountMintAuthority>
        : TAccountMintAuthority,
      TAccountMint extends string
        ? WritableAccount<TAccountMint>
        : TAccountMint,
      TAccountMinterNftMint extends string
        ? ReadonlyAccount<TAccountMinterNftMint>
        : TAccountMinterNftMint,
      TAccountMinterNftTokenAccount extends string
        ? ReadonlyAccount<TAccountMinterNftTokenAccount>
        : TAccountMinterNftTokenAccount,
      TAccountTransferHookProgram extends string
        ? ReadonlyAccount<TAccountTransferHookProgram>
        : TAccountTransferHookProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitCarbonTokenInstructionData = {
  discriminator: ReadonlyUint8Array;
  name: string;
  symbol: string;
  uri: string;
};

export type InitCarbonTokenInstructionDataArgs = {
  name: string;
  symbol: string;
  uri: string;
};

export function getInitCarbonTokenInstructionDataEncoder(): Encoder<InitCarbonTokenInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['symbol', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['uri', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({ ...value, discriminator: INIT_CARBON_TOKEN_DISCRIMINATOR })
  );
}

export function getInitCarbonTokenInstructionDataDecoder(): Decoder<InitCarbonTokenInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['symbol', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['uri', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getInitCarbonTokenInstructionDataCodec(): Codec<
  InitCarbonTokenInstructionDataArgs,
  InitCarbonTokenInstructionData
> {
  return combineCodec(
    getInitCarbonTokenInstructionDataEncoder(),
    getInitCarbonTokenInstructionDataDecoder()
  );
}

export type InitCarbonTokenAsyncInput<
  TAccountPayer extends string = string,
  TAccountCreator extends string = string,
  TAccountMintAuthority extends string = string,
  TAccountMint extends string = string,
  TAccountMinterNftMint extends string = string,
  TAccountMinterNftTokenAccount extends string = string,
  TAccountTransferHookProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  creator: TransactionSigner<TAccountCreator>;
  mintAuthority?: Address<TAccountMintAuthority>;
  mint?: Address<TAccountMint>;
  minterNftMint?: Address<TAccountMinterNftMint>;
  minterNftTokenAccount?: Address<TAccountMinterNftTokenAccount>;
  transferHookProgram: Address<TAccountTransferHookProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  name: InitCarbonTokenInstructionDataArgs['name'];
  symbol: InitCarbonTokenInstructionDataArgs['symbol'];
  uri: InitCarbonTokenInstructionDataArgs['uri'];
};

export async function getInitCarbonTokenInstructionAsync<
  TAccountPayer extends string,
  TAccountCreator extends string,
  TAccountMintAuthority extends string,
  TAccountMint extends string,
  TAccountMinterNftMint extends string,
  TAccountMinterNftTokenAccount extends string,
  TAccountTransferHookProgram extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof RWA_TOKENIZATION_PROGRAM_ADDRESS,
>(
  input: InitCarbonTokenAsyncInput<
    TAccountPayer,
    TAccountCreator,
    TAccountMintAuthority,
    TAccountMint,
    TAccountMinterNftMint,
    TAccountMinterNftTokenAccount,
    TAccountTransferHookProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitCarbonTokenInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountCreator,
    TAccountMintAuthority,
    TAccountMint,
    TAccountMinterNftMint,
    TAccountMinterNftTokenAccount,
    TAccountTransferHookProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? RWA_TOKENIZATION_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    creator: { value: input.creator ?? null, isWritable: true },
    mintAuthority: { value: input.mintAuthority ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: true },
    minterNftMint: { value: input.minterNftMint ?? null, isWritable: false },
    minterNftTokenAccount: {
      value: input.minterNftTokenAccount ?? null,
      isWritable: false,
    },
    transferHookProgram: {
      value: input.transferHookProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.minterNftMint.value) {
    accounts.minterNftMint.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([109])),
        getAddressEncoder().encode(expectAddress(accounts.creator.value)),
      ],
    });
  }
  if (!accounts.mint.value) {
    accounts.mint.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([99, 99, 116])),
        getAddressEncoder().encode(expectAddress(accounts.minterNftMint.value)),
      ],
    });
  }
  if (!accounts.mintAuthority.value) {
    accounts.mintAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([109, 97])),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }
  if (!accounts.minterNftTokenAccount.value) {
    accounts.minterNftTokenAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.creator.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.minterNftMint.value)),
      ],
    });
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.mintAuthority),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.minterNftMint),
      getAccountMeta(accounts.minterNftTokenAccount),
      getAccountMeta(accounts.transferHookProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitCarbonTokenInstructionDataEncoder().encode(
      args as InitCarbonTokenInstructionDataArgs
    ),
  } as InitCarbonTokenInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountCreator,
    TAccountMintAuthority,
    TAccountMint,
    TAccountMinterNftMint,
    TAccountMinterNftTokenAccount,
    TAccountTransferHookProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type InitCarbonTokenInput<
  TAccountPayer extends string = string,
  TAccountCreator extends string = string,
  TAccountMintAuthority extends string = string,
  TAccountMint extends string = string,
  TAccountMinterNftMint extends string = string,
  TAccountMinterNftTokenAccount extends string = string,
  TAccountTransferHookProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  creator: TransactionSigner<TAccountCreator>;
  mintAuthority: Address<TAccountMintAuthority>;
  mint: Address<TAccountMint>;
  minterNftMint: Address<TAccountMinterNftMint>;
  minterNftTokenAccount: Address<TAccountMinterNftTokenAccount>;
  transferHookProgram: Address<TAccountTransferHookProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  name: InitCarbonTokenInstructionDataArgs['name'];
  symbol: InitCarbonTokenInstructionDataArgs['symbol'];
  uri: InitCarbonTokenInstructionDataArgs['uri'];
};

export function getInitCarbonTokenInstruction<
  TAccountPayer extends string,
  TAccountCreator extends string,
  TAccountMintAuthority extends string,
  TAccountMint extends string,
  TAccountMinterNftMint extends string,
  TAccountMinterNftTokenAccount extends string,
  TAccountTransferHookProgram extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof RWA_TOKENIZATION_PROGRAM_ADDRESS,
>(
  input: InitCarbonTokenInput<
    TAccountPayer,
    TAccountCreator,
    TAccountMintAuthority,
    TAccountMint,
    TAccountMinterNftMint,
    TAccountMinterNftTokenAccount,
    TAccountTransferHookProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitCarbonTokenInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountCreator,
  TAccountMintAuthority,
  TAccountMint,
  TAccountMinterNftMint,
  TAccountMinterNftTokenAccount,
  TAccountTransferHookProgram,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? RWA_TOKENIZATION_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    creator: { value: input.creator ?? null, isWritable: true },
    mintAuthority: { value: input.mintAuthority ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: true },
    minterNftMint: { value: input.minterNftMint ?? null, isWritable: false },
    minterNftTokenAccount: {
      value: input.minterNftTokenAccount ?? null,
      isWritable: false,
    },
    transferHookProgram: {
      value: input.transferHookProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.mintAuthority),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.minterNftMint),
      getAccountMeta(accounts.minterNftTokenAccount),
      getAccountMeta(accounts.transferHookProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitCarbonTokenInstructionDataEncoder().encode(
      args as InitCarbonTokenInstructionDataArgs
    ),
  } as InitCarbonTokenInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountCreator,
    TAccountMintAuthority,
    TAccountMint,
    TAccountMinterNftMint,
    TAccountMinterNftTokenAccount,
    TAccountTransferHookProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitCarbonTokenInstruction<
  TProgram extends string = typeof RWA_TOKENIZATION_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    creator: TAccountMetas[1];
    mintAuthority: TAccountMetas[2];
    mint: TAccountMetas[3];
    minterNftMint: TAccountMetas[4];
    minterNftTokenAccount: TAccountMetas[5];
    transferHookProgram: TAccountMetas[6];
    tokenProgram: TAccountMetas[7];
    associatedTokenProgram: TAccountMetas[8];
    systemProgram: TAccountMetas[9];
  };
  data: InitCarbonTokenInstructionData;
};

export function parseInitCarbonTokenInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitCarbonTokenInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      creator: getNextAccount(),
      mintAuthority: getNextAccount(),
      mint: getNextAccount(),
      minterNftMint: getNextAccount(),
      minterNftTokenAccount: getNextAccount(),
      transferHookProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitCarbonTokenInstructionDataDecoder().decode(instruction.data),
  };
}
