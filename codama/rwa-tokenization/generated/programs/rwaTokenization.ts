/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedInitCarbonTokenInstruction,
  type ParsedInitializeInstruction,
  type ParsedIssueConsumerCertInstruction,
  type ParsedIssueMinterCertInstruction,
  type ParsedMintCarbonTokenInstruction,
  type ParsedRetireTokenInstruction,
  type ParsedUpdateQuotaCreditInstruction,
} from '../instructions';

export const RWA_TOKENIZATION_PROGRAM_ADDRESS =
  '66A211WXh9NJUXbepAkx3EriziiPHdWLxiKQwFFkW8iD' as Address<'66A211WXh9NJUXbepAkx3EriziiPHdWLxiKQwFFkW8iD'>;

export enum RwaTokenizationAccount {
  GovernanceConfig,
  MintAuthority,
}

export function identifyRwaTokenizationAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): RwaTokenizationAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([81, 63, 124, 107, 210, 100, 145, 70])
      ),
      0
    )
  ) {
    return RwaTokenizationAccount.GovernanceConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([148, 0, 219, 228, 254, 237, 76, 128])
      ),
      0
    )
  ) {
    return RwaTokenizationAccount.MintAuthority;
  }
  throw new Error(
    'The provided account could not be identified as a rwaTokenization account.'
  );
}

export enum RwaTokenizationInstruction {
  InitCarbonToken,
  Initialize,
  IssueConsumerCert,
  IssueMinterCert,
  MintCarbonToken,
  RetireToken,
  UpdateQuotaCredit,
}

export function identifyRwaTokenizationInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): RwaTokenizationInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([255, 85, 206, 60, 14, 230, 186, 114])
      ),
      0
    )
  ) {
    return RwaTokenizationInstruction.InitCarbonToken;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([175, 175, 109, 31, 13, 152, 155, 237])
      ),
      0
    )
  ) {
    return RwaTokenizationInstruction.Initialize;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([29, 119, 198, 33, 255, 129, 195, 158])
      ),
      0
    )
  ) {
    return RwaTokenizationInstruction.IssueConsumerCert;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([211, 103, 150, 50, 154, 142, 227, 197])
      ),
      0
    )
  ) {
    return RwaTokenizationInstruction.IssueMinterCert;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([207, 25, 9, 69, 73, 81, 107, 140])
      ),
      0
    )
  ) {
    return RwaTokenizationInstruction.MintCarbonToken;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([226, 89, 231, 200, 108, 28, 18, 183])
      ),
      0
    )
  ) {
    return RwaTokenizationInstruction.RetireToken;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([229, 184, 26, 71, 201, 124, 38, 234])
      ),
      0
    )
  ) {
    return RwaTokenizationInstruction.UpdateQuotaCredit;
  }
  throw new Error(
    'The provided instruction could not be identified as a rwaTokenization instruction.'
  );
}

export type ParsedRwaTokenizationInstruction<
  TProgram extends string = '66A211WXh9NJUXbepAkx3EriziiPHdWLxiKQwFFkW8iD',
> =
  | ({
      instructionType: RwaTokenizationInstruction.InitCarbonToken;
    } & ParsedInitCarbonTokenInstruction<TProgram>)
  | ({
      instructionType: RwaTokenizationInstruction.Initialize;
    } & ParsedInitializeInstruction<TProgram>)
  | ({
      instructionType: RwaTokenizationInstruction.IssueConsumerCert;
    } & ParsedIssueConsumerCertInstruction<TProgram>)
  | ({
      instructionType: RwaTokenizationInstruction.IssueMinterCert;
    } & ParsedIssueMinterCertInstruction<TProgram>)
  | ({
      instructionType: RwaTokenizationInstruction.MintCarbonToken;
    } & ParsedMintCarbonTokenInstruction<TProgram>)
  | ({
      instructionType: RwaTokenizationInstruction.RetireToken;
    } & ParsedRetireTokenInstruction<TProgram>)
  | ({
      instructionType: RwaTokenizationInstruction.UpdateQuotaCredit;
    } & ParsedUpdateQuotaCreditInstruction<TProgram>);
