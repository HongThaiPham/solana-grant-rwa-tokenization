/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { TOKEN_TRANSFER_HOOK_PROGRAM_ADDRESS } from '../programs';

/** UnAuthorized: You are not authorized to perform this action */
export const TOKEN_TRANSFER_HOOK_ERROR__UN_AUTHORIZED = 0x1770; // 6000

export type TokenTransferHookError =
  typeof TOKEN_TRANSFER_HOOK_ERROR__UN_AUTHORIZED;

let tokenTransferHookErrorMessages:
  | Record<TokenTransferHookError, string>
  | undefined;
if (process.env.NODE_ENV !== 'production') {
  tokenTransferHookErrorMessages = {
    [TOKEN_TRANSFER_HOOK_ERROR__UN_AUTHORIZED]: `You are not authorized to perform this action`,
  };
}

export function getTokenTransferHookErrorMessage(
  code: TokenTransferHookError
): string {
  if (process.env.NODE_ENV !== 'production') {
    return (
      tokenTransferHookErrorMessages as Record<TokenTransferHookError, string>
    )[code];
  }

  return 'Error message not available in production bundles.';
}

export function isTokenTransferHookError<
  TProgramErrorCode extends TokenTransferHookError,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    TOKEN_TRANSFER_HOOK_PROGRAM_ADDRESS,
    code
  );
}
