/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedExecuteInstruction,
  type ParsedInitializeExtraAccountMetaListInstruction,
} from '../instructions';

export const TOKEN_TRANSFER_HOOK_PROGRAM_ADDRESS =
  '3iSipiR8nmukvNan7ZWDJ2Cx7V7EmHPXLkQmsN1nrEna' as Address<'3iSipiR8nmukvNan7ZWDJ2Cx7V7EmHPXLkQmsN1nrEna'>;

export enum TokenTransferHookInstruction {
  Execute,
  InitializeExtraAccountMetaList,
}

export function identifyTokenTransferHookInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): TokenTransferHookInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([105, 37, 101, 197, 75, 251, 102, 26])
      ),
      0
    )
  ) {
    return TokenTransferHookInstruction.Execute;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([43, 34, 13, 49, 167, 88, 235, 235])
      ),
      0
    )
  ) {
    return TokenTransferHookInstruction.InitializeExtraAccountMetaList;
  }
  throw new Error(
    'The provided instruction could not be identified as a tokenTransferHook instruction.'
  );
}

export type ParsedTokenTransferHookInstruction<
  TProgram extends string = '3iSipiR8nmukvNan7ZWDJ2Cx7V7EmHPXLkQmsN1nrEna',
> =
  | ({
      instructionType: TokenTransferHookInstruction.Execute;
    } & ParsedExecuteInstruction<TProgram>)
  | ({
      instructionType: TokenTransferHookInstruction.InitializeExtraAccountMetaList;
    } & ParsedInitializeExtraAccountMetaListInstruction<TProgram>);
