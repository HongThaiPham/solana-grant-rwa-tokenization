/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import { TOKEN_TRANSFER_HOOK_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const EXECUTE_DISCRIMINATOR = new Uint8Array([
  105, 37, 101, 197, 75, 251, 102, 26,
]);

export function getExecuteDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(EXECUTE_DISCRIMINATOR);
}

export type ExecuteInstruction<
  TProgram extends string = typeof TOKEN_TRANSFER_HOOK_PROGRAM_ADDRESS,
  TAccountSourceToken extends string | IAccountMeta<string> = string,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountDestinationToken extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountExtraAccountMetaList extends string | IAccountMeta<string> = string,
  TAccountRwaProgram extends string | IAccountMeta<string> = string,
  TAccountSourceMintNft extends string | IAccountMeta<string> = string,
  TAccountDestinationMintNft extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSourceToken extends string
        ? ReadonlyAccount<TAccountSourceToken>
        : TAccountSourceToken,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountDestinationToken extends string
        ? ReadonlyAccount<TAccountDestinationToken>
        : TAccountDestinationToken,
      TAccountOwner extends string
        ? ReadonlyAccount<TAccountOwner>
        : TAccountOwner,
      TAccountExtraAccountMetaList extends string
        ? ReadonlyAccount<TAccountExtraAccountMetaList>
        : TAccountExtraAccountMetaList,
      TAccountRwaProgram extends string
        ? ReadonlyAccount<TAccountRwaProgram>
        : TAccountRwaProgram,
      TAccountSourceMintNft extends string
        ? ReadonlyAccount<TAccountSourceMintNft>
        : TAccountSourceMintNft,
      TAccountDestinationMintNft extends string
        ? ReadonlyAccount<TAccountDestinationMintNft>
        : TAccountDestinationMintNft,
      ...TRemainingAccounts,
    ]
  >;

export type ExecuteInstructionData = {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
};

export type ExecuteInstructionDataArgs = { amount: number | bigint };

export function getExecuteInstructionDataEncoder(): Encoder<ExecuteInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: EXECUTE_DISCRIMINATOR })
  );
}

export function getExecuteInstructionDataDecoder(): Decoder<ExecuteInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount', getU64Decoder()],
  ]);
}

export function getExecuteInstructionDataCodec(): Codec<
  ExecuteInstructionDataArgs,
  ExecuteInstructionData
> {
  return combineCodec(
    getExecuteInstructionDataEncoder(),
    getExecuteInstructionDataDecoder()
  );
}

export type ExecuteAsyncInput<
  TAccountSourceToken extends string = string,
  TAccountMint extends string = string,
  TAccountDestinationToken extends string = string,
  TAccountOwner extends string = string,
  TAccountExtraAccountMetaList extends string = string,
  TAccountRwaProgram extends string = string,
  TAccountSourceMintNft extends string = string,
  TAccountDestinationMintNft extends string = string,
> = {
  sourceToken: Address<TAccountSourceToken>;
  mint: Address<TAccountMint>;
  destinationToken: Address<TAccountDestinationToken>;
  owner: Address<TAccountOwner>;
  extraAccountMetaList?: Address<TAccountExtraAccountMetaList>;
  rwaProgram: Address<TAccountRwaProgram>;
  sourceMintNft: Address<TAccountSourceMintNft>;
  destinationMintNft: Address<TAccountDestinationMintNft>;
  amount: ExecuteInstructionDataArgs['amount'];
};

export async function getExecuteInstructionAsync<
  TAccountSourceToken extends string,
  TAccountMint extends string,
  TAccountDestinationToken extends string,
  TAccountOwner extends string,
  TAccountExtraAccountMetaList extends string,
  TAccountRwaProgram extends string,
  TAccountSourceMintNft extends string,
  TAccountDestinationMintNft extends string,
  TProgramAddress extends Address = typeof TOKEN_TRANSFER_HOOK_PROGRAM_ADDRESS,
>(
  input: ExecuteAsyncInput<
    TAccountSourceToken,
    TAccountMint,
    TAccountDestinationToken,
    TAccountOwner,
    TAccountExtraAccountMetaList,
    TAccountRwaProgram,
    TAccountSourceMintNft,
    TAccountDestinationMintNft
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ExecuteInstruction<
    TProgramAddress,
    TAccountSourceToken,
    TAccountMint,
    TAccountDestinationToken,
    TAccountOwner,
    TAccountExtraAccountMetaList,
    TAccountRwaProgram,
    TAccountSourceMintNft,
    TAccountDestinationMintNft
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? TOKEN_TRANSFER_HOOK_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    sourceToken: { value: input.sourceToken ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: false },
    destinationToken: {
      value: input.destinationToken ?? null,
      isWritable: false,
    },
    owner: { value: input.owner ?? null, isWritable: false },
    extraAccountMetaList: {
      value: input.extraAccountMetaList ?? null,
      isWritable: false,
    },
    rwaProgram: { value: input.rwaProgram ?? null, isWritable: false },
    sourceMintNft: { value: input.sourceMintNft ?? null, isWritable: false },
    destinationMintNft: {
      value: input.destinationMintNft ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.extraAccountMetaList.value) {
    accounts.extraAccountMetaList.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            101, 120, 116, 114, 97, 45, 97, 99, 99, 111, 117, 110, 116, 45, 109,
            101, 116, 97, 115,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.sourceToken),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.destinationToken),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.extraAccountMetaList),
      getAccountMeta(accounts.rwaProgram),
      getAccountMeta(accounts.sourceMintNft),
      getAccountMeta(accounts.destinationMintNft),
    ],
    programAddress,
    data: getExecuteInstructionDataEncoder().encode(
      args as ExecuteInstructionDataArgs
    ),
  } as ExecuteInstruction<
    TProgramAddress,
    TAccountSourceToken,
    TAccountMint,
    TAccountDestinationToken,
    TAccountOwner,
    TAccountExtraAccountMetaList,
    TAccountRwaProgram,
    TAccountSourceMintNft,
    TAccountDestinationMintNft
  >;

  return instruction;
}

export type ExecuteInput<
  TAccountSourceToken extends string = string,
  TAccountMint extends string = string,
  TAccountDestinationToken extends string = string,
  TAccountOwner extends string = string,
  TAccountExtraAccountMetaList extends string = string,
  TAccountRwaProgram extends string = string,
  TAccountSourceMintNft extends string = string,
  TAccountDestinationMintNft extends string = string,
> = {
  sourceToken: Address<TAccountSourceToken>;
  mint: Address<TAccountMint>;
  destinationToken: Address<TAccountDestinationToken>;
  owner: Address<TAccountOwner>;
  extraAccountMetaList: Address<TAccountExtraAccountMetaList>;
  rwaProgram: Address<TAccountRwaProgram>;
  sourceMintNft: Address<TAccountSourceMintNft>;
  destinationMintNft: Address<TAccountDestinationMintNft>;
  amount: ExecuteInstructionDataArgs['amount'];
};

export function getExecuteInstruction<
  TAccountSourceToken extends string,
  TAccountMint extends string,
  TAccountDestinationToken extends string,
  TAccountOwner extends string,
  TAccountExtraAccountMetaList extends string,
  TAccountRwaProgram extends string,
  TAccountSourceMintNft extends string,
  TAccountDestinationMintNft extends string,
  TProgramAddress extends Address = typeof TOKEN_TRANSFER_HOOK_PROGRAM_ADDRESS,
>(
  input: ExecuteInput<
    TAccountSourceToken,
    TAccountMint,
    TAccountDestinationToken,
    TAccountOwner,
    TAccountExtraAccountMetaList,
    TAccountRwaProgram,
    TAccountSourceMintNft,
    TAccountDestinationMintNft
  >,
  config?: { programAddress?: TProgramAddress }
): ExecuteInstruction<
  TProgramAddress,
  TAccountSourceToken,
  TAccountMint,
  TAccountDestinationToken,
  TAccountOwner,
  TAccountExtraAccountMetaList,
  TAccountRwaProgram,
  TAccountSourceMintNft,
  TAccountDestinationMintNft
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? TOKEN_TRANSFER_HOOK_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    sourceToken: { value: input.sourceToken ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: false },
    destinationToken: {
      value: input.destinationToken ?? null,
      isWritable: false,
    },
    owner: { value: input.owner ?? null, isWritable: false },
    extraAccountMetaList: {
      value: input.extraAccountMetaList ?? null,
      isWritable: false,
    },
    rwaProgram: { value: input.rwaProgram ?? null, isWritable: false },
    sourceMintNft: { value: input.sourceMintNft ?? null, isWritable: false },
    destinationMintNft: {
      value: input.destinationMintNft ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.sourceToken),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.destinationToken),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.extraAccountMetaList),
      getAccountMeta(accounts.rwaProgram),
      getAccountMeta(accounts.sourceMintNft),
      getAccountMeta(accounts.destinationMintNft),
    ],
    programAddress,
    data: getExecuteInstructionDataEncoder().encode(
      args as ExecuteInstructionDataArgs
    ),
  } as ExecuteInstruction<
    TProgramAddress,
    TAccountSourceToken,
    TAccountMint,
    TAccountDestinationToken,
    TAccountOwner,
    TAccountExtraAccountMetaList,
    TAccountRwaProgram,
    TAccountSourceMintNft,
    TAccountDestinationMintNft
  >;

  return instruction;
}

export type ParsedExecuteInstruction<
  TProgram extends string = typeof TOKEN_TRANSFER_HOOK_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    sourceToken: TAccountMetas[0];
    mint: TAccountMetas[1];
    destinationToken: TAccountMetas[2];
    owner: TAccountMetas[3];
    extraAccountMetaList: TAccountMetas[4];
    rwaProgram: TAccountMetas[5];
    sourceMintNft: TAccountMetas[6];
    destinationMintNft: TAccountMetas[7];
  };
  data: ExecuteInstructionData;
};

export function parseExecuteInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedExecuteInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      sourceToken: getNextAccount(),
      mint: getNextAccount(),
      destinationToken: getNextAccount(),
      owner: getNextAccount(),
      extraAccountMetaList: getNextAccount(),
      rwaProgram: getNextAccount(),
      sourceMintNft: getNextAccount(),
      destinationMintNft: getNextAccount(),
    },
    data: getExecuteInstructionDataDecoder().decode(instruction.data),
  };
}
